name: Build and deploy API

env:
  AWS_REGION: ca-central-1
  SELF_HOSTED_RUNNER: none
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
  PORT: 0000
  DB_URL: none
  DB_USER: none
  MAILCHIMP_URL: ${{ vars.MAILCHIMP_URL }}
  MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
  MAILCHIMP_LIST_ID: ${{ secrets.MAILCHIMP_LIST_ID }}
  
on: [ push, pull_request ]

jobs:

  prepare-env:
    name: Prepare environment variables
    runs-on: ubuntu-latest

    steps:
      - name: Set env vars (develop) 
        if: endsWith(github.ref, '/develop')
        run: |
          echo 'env: dev'
          echo  "SELF_HOSTED_RUNNER=aws-ec2-dev" >> $GITHUB_ENV
          echo  "NAME=dev" >> $GITHUB_ENV          
          echo  "PORT=${{ vars.PORT_DEV }}" >> $GITHUB_ENV
          echo  "DB_URL=${{ vars.DB_URL_DEV }}" >> $GITHUB_ENV
          echo  "DB_USER=${{ vars.DB_USER_DEV }}" >> $GITHUB_ENV
      - name: Set env vars (prod)
        if: endsWith(github.ref, '/prod')
        run: |
          echo 'env: prod'
          echo  "SELF_HOSTED_RUNNER=aws-ec2-prod" >> $GITHUB_ENV
          echo  "NAME=prod" >> $GITHUB_ENV
          echo  "PORT=${{ vars.PORT_PROD }}" >> $GITHUB_ENV
          echo  "DB_URL=${{ vars.DB_URL_PROD }}" >> $GITHUB_ENV
          echo  "DB_USER=${{ vars.DB_USER_PROD }}" >> $GITHUB_ENV
      - name: Set env vars (test)
        if: ${{ !endsWith(github.ref, '/prod') && !endsWith(github.ref, '/develop') }}
        run: |
          echo 'env: test'
          echo  "SELF_HOSTED_RUNNER=aws-ec2-dev" >> $GITHUB_ENV
          echo  "NAME=test" >> $GITHUB_ENV
          echo  "PORT=9999" >> $GITHUB_ENV
          echo  "DB_URL=${{ vars.DB_URL_DEV }}" >> $GITHUB_ENV
          echo  "DB_USER=${{ vars.DB_USER_DEV }}" >> $GITHUB_ENV
    outputs:
      runner: ${{ env.SELF_HOSTED_RUNNER }}
      env: ${{ env.NAME }}
      brunch: ${{ env.BRANCH_NAME }}
      port: ${{ env.PORT }}
      db_url: ${{ env.DB_URL }}
      db_user: ${{ env.DB_USER }}

  build:
    name: Building
    needs: prepare-env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current branch from GitHub
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-env.outputs.brunch }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build docker image
        run: docker build --build-arg PORT=${{ needs.prepare-env.outputs.port }} --build-arg DB_URL=${{ needs.prepare-env.outputs.db_url }} --build-arg DB_USER=${{ needs.prepare-env.outputs.db_user }} --build-arg MAILCHIMP_API_KEY=${{ secrets.MAILCHIMP_API_KEY }} --build-arg MAILCHIMP_LIST_ID=${{ secrets.MAILCHIMP_LIST_ID }} --build-arg MAILCHIMP_URL=${{ vars.MAILCHIMP_URL }} -t intheknowyyc/in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }} .

      - name: Publish image to Docker Hub
        run: docker push intheknowyyc/in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }}:latest

  deploy:
    name: Deployment
    needs: [ prepare-env, build ]
    runs-on: ${{ needs.prepare-env.outputs.runner }}

    if: ${{ endsWith(github.ref, '/prod') || endsWith(github.ref, '/develop') }}

    steps:
      - name: Pull Image from Docker Hub
        run: docker pull intheknowyyc/in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }}:latest

      - name: Delete old container
        run: |
          docker rm -f in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }}-container
          docker system prune --all -f

      - name: Run docker container
        run: docker run -d -p ${{ needs.prepare-env.outputs.port }}:${{ needs.prepare-env.outputs.port }} --name in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }}-container intheknowyyc/in-the-know-yyc-api-${{ needs.prepare-env.outputs.env }}
